import com.android.build.gradle.api.ApkVariant

def isDebug = debug.toBoolean() && productDebug.toBoolean()
println 'current mode:' + isDebug

if (isDebug) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    //publishNonDefault true
    resourcePrefix 'p_'//资源冲突

    sourceSets {
        main {
            if (isDebug) {
                manifest.srcFile "src/main/debug/AndroidManifest.xml"
                java {
                    exclude 'release/**'
                }
            } else {
                manifest.srcFile "src/main/AndroidManifest.xml"
                java {
                    exclude 'debug/**'
                }
            }
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        if (isDebug.toBoolean()) {
            ndk {
                abiFilters "armeabi-v7a", "x86"
            }
        }
    }

    buildTypes {
        debug {

        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        packagingOptions {
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/rxjava.properties'
        }
    }
}

repositories {
    flatDir {
        dirs project(':bizUser').buildDir.absolutePath + '/outputs/aar'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //compile(name:'bizUser-debug',ext:'aar')
    //compile files('libs/xxxx.jar')
    compile rootProject.ext.libSupportAppcompat
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    /*compile project(':bizUser') { //本地库
        exclude module: 'biz...' //排除重复引用
    }
    compile(name:'bizOrder-debug',ext:'aar')
    compile 'com.xujian.imagelib:test:1.1.0' {
        exclude group: 'com.android.support' //排除多次引用
    }
    */
    //插件化应用时，在编译过程中对某个JAR有依赖，允许编译通过，但打包时不会打进去
    //provided fileTree(dir: project(':bizUser').projectDir.absolutePath + '/outputs/jar/', include: 'bizUser.jar')

    compile project(':frameworkCore')
    compile project(':frameworkResource')

    if (isDebug) {
        //compile project(':bizOrder')
    }
}

//构造变种版本，方便组件单独运行时生成其他组件可以引用的JAR包
/*if (isDebug) {
    android.applicationVariants.all { ApkVariant variant ->
        def buildTypeName = variant.buildType.name
        def task = project.tasks.create "jar${buildTypeName.capitalize()}", Jar
        task.archiveName = 'bizProduct.jar'
        task.dependsOn variant.javaCompiler
        task.outputs.upToDateWhen { false }
        task.from variant.javaCompiler.destinationDir
        task.destinationDir = file(projectDir.absolutePath + "/outputs/jar")
        artifacts.add('archives', task)
    }
}*/